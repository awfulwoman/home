---
# - name: Install ZFS backup tooling
#   become: true
#   ansible.builtin.apt:
#     name: 
#       - moreutils # for ts (timestamp) util
#       - lzop
#       - mbuffer
#     state: present

# ENSURE zfsbackup USER EXISTS: 
# useradd zfsbackup --create-home --system
- name: Add the user 'zfsbackup'
  become: true
  ansible.builtin.user:
    name: zfsbackup
    comment: ZFS Backup User
    system: true
    create_home: true
    uid: 1099 # just forcing a higher ID in case we need it later
    state: present
  register: created_user

- name: Debug created_user
  debug:
    msg: "{{created_user.home}}"

# ENSURE SSH DIR EXISTS FOR zfsbackup USER: 
- name: Create .ssh dir
  become: true
  ansible.builtin.file:
    path: "{{created_user.home}}/.ssh"
    state: directory
    owner: zfsbackup
    group: zfsbackup

# Copy over restricted commands script
- name: Ensure restrict_commands.sh exists
  become: true
  ansible.builtin.copy:
    src: restrict_commands.sh
    dest: /usr/local/bin/restrict_commands.sh
    owner: root
    group: root
    mode: 0777

- name: Allow backups of listed datasets
  become: true
  ansible.builtin.command: "zfs allow -u zfsbackup send,hold {{ item }}"
  loop: "{{ backup_datasets }}"
  when: backup_datasets

- name: slurpfile backup client debug
  debug:
    msg: "{{ hostvars[groups['zfs-backup-server'][0]]['public_key']}}"

- name: Set authorized key and options
  become: true
  ansible.posix.authorized_key:
    user: zfsbackup
    state: present
    key: "{{ hostvars[groups['zfs-backup-server'][0]]['public_key'] | default(False) }}"
    key_options: 'restrict,command="restrict_commands.sh"'

