---
- name: Install ZFS backup tooling
  become: true
  ansible.builtin.apt:
    name:
      - zfsutils-linux
      - sanoid
      - acl
      - moreutils # for ts (timestamp) util
      - lzop
      - mbuffer
    state: present

- name: Publish backup server public key as fact
  ansible.builtin.set_fact:
    public_key: "{{ vault_zfsbackups_public_key }}"

- name: Ensure backups pool exists
  become: true
  community.general.zfs:
    name: backuppool
    state: present

- name: Ensure a dataset for each backup client is present
  become: true
  community.general.zfs:
    name: "backuppool/{{ item }}"
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa
      # mountpoint: none
  loop: "{{ zfsbackup_clients }}"


- name: Set dataset
  set_fact:
    datasets: []

- name: Show value of 'hostvars[item]['zfs_backup_datasets']'
  set_fact:
    datasets: "{{ datasets + _result }}"
  loop: "{{ zfsbackup_clients }}"
  vars:
    _host_datasets: "{{ hostvars[item].zfs_backup_datasets }}"
    _result: "{{ [item + '/'] | product(_host_datasets) | map('join') | list }}"

- name: Show value dataset_names
  ansible.builtin.debug: 
    var: datasets

- name: Ensure a dataset for each dataset in backup client is present
  become: true
  community.general.zfs:
    name: "backuppool/{{ item }}"
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa
      # mountpoint: none
  loop: "{{ datasets }}"


- name: "Ensure /backuppool mountpoint is owned by {{ ansible_user }}"
  become: true
  ansible.builtin.file:
    path: /backuppool
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    mode: 0774
    recurse: true

- name: Generate and deploy backup script
  become: true
  ansible.builtin.template:
    src: templates/zfs-backup.sh.j2
    dest: /usr/local/sbin/zfs-backup.sh
    owner: root
    group: root
    mode: 0774

- name: Cron to run zfs-backup.sh
  # Runs at a specified time to catch reboots and previous backup failures
  become: true
  ansible.builtin.cron:
    name: "backup.sh"
    job: /usr/local/sbin/zfs-backup.sh
    state: present
    minute: "{{ zfsbackup_cron_minute }}"
    hour: "{{ zfsbackup_cron_hour }}"

# SET PRIVATE BACKUP KEY FROM VAULT
- name: Ensure .ssh directory exists.
  ansible.builtin.file: 
    dest: "/home/{{ ansible_user}}/.ssh"
    mode: 0700 
    owner: "{{ ansible_user}}"
    group: "{{ ansible_user}}"
    state: directory

- name: debug
  debug: 
    var: vault_zfsbackups_privatekey_b64

- name: Install ssh key
  ansible.builtin.copy: 
    content: "{{ vault_zfsbackups_privatekey_b64 | b64decode }}" 
    dest: "/home/{{ ansible_user}}/.ssh/id_rsa"
    mode: 0600
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user}}"

- name: Allow non-sudo account to do ZFS things
  become: true
  community.general.zfs_delegate_admin:
    name: backuppool
    users: "{{ ansible_user }}"
    permissions: mount,compression,mountpoint,create,mount,receive
    descendents: true