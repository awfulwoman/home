---
- name: Install ZFS backup tooling
  become: true
  ansible.builtin.apt:
    name:
      - zfsutils-linux
      - sanoid
      - acl
      - moreutils # for ts (timestamp) util
      - lzop
      - mbuffer
    state: present

- name: Read backup server public key
  become: true
  ansible.builtin.slurp:
    src: $HOME/.ssh/id_ed25519.pub
  register: slurpfile

- name: Publish backup server public key as fact
  ansible.builtin.set_fact:
    public_key: "{{ slurpfile['content'] | b64decode }}"

- name: Ensure backups pool exists
  become: true
  community.general.zfs:
    name: backups
    state: present

- name: Ensure backups/slowpool dataset is present # TODO: Loop over dataset zfs_backup_datasets
  become: true
  community.general.zfs:
    name: backups/slowpool
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa
      # mountpoint: none

- name: Ensure backups/fastpool dataset is present # TODO: Loop over dataset zfs_backup_datasets
  become: true
  community.general.zfs:
    name: backups/fastpool
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa
      # mountpoint: none

- name: "Ensure /backuppool mountpoint is owned by {{ ansible_user }}"
  become: true
  ansible.builtin.file:
    path: /backups
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    mode: 0774
    recurse: true

- name: Generate and deploy backup script
  become: true
  ansible.builtin.template:
    src: templates/backup.sh.j2
    dest: /usr/local/sbin/backup.sh
    owner: root
    group: root
    mode: 0774
  when: zfs_backup_datasets

- name: Cron to run backup.sh
  # Runs at a specified time to catch reboots and previous backup failures
  become: true
  ansible.builtin.cron:
    name: "backup.sh"
    job: TZ=UTC /usr/local/sbin/backup.sh
    state: present
    minute: "{{ zfsbackup_cron_minute }}"
    hour: "{{ zfsbackup_cron_hour }}"
  when: zfs_backup_datasets
