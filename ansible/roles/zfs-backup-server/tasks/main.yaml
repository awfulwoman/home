---
- name: Install ZFS backup tooling
  become: true
  ansible.builtin.apt:
    name:
      - zfsutils-linux
      - sanoid
      - acl
      - moreutils # for ts (timestamp) util
      - lzop
      - mbuffer
    state: present

- name: Publish backup server public key as fact
  ansible.builtin.set_fact:
    public_key: "{{ vault_zfsbackups_public_key }}"

- name: Ensure backups pool exists
  become: true
  community.general.zfs:
    name: backuppool
    state: present

- name: Ensure a dataset for each backup client is present
  become: true
  community.general.zfs:
    name: "backuppool/{{ item }}"
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa
      # mountpoint: none
  loop: "{{ zfsbackup_clients }}"

# EXAMPLE HOST LIST
# vars: 
#   zfsbackup_clients:
#   - host-storage
#   - host-homeautomation

# EXAMPLE FROM zfsbackup_clients[0]
# zfs_datasets: 
# - slowpool/pools
# - slowpool/images
# - slowpool/media
# - slowpool/backups

- name: Set blah dataset
  set_fact:
    datasets: []

- name: Show value of 'hostvars[item]['zfs_backup_datasets']'
  set_fact:
    datasets: "{{ datasets + _result }}"
  loop: "{{ zfsbackup_clients }}"
  vars:
    _host_datasets: "{{ hostvars[item].zfs_backup_datasets }}"
    _result: "{{ [item + '/'] | product(_host_datasets) | map('join') | list }}"
    # _start: "{{ _var.action_list.start.0|default('') }}"

- name: Show value dataset_names
  ansible.builtin.debug: 
    var: datasets


# - name: Show value of 'hostvars[item]['zfs_backup_datasets']'
#   ansible.builtin.debug: 
#     var: "hostvars['{{ item }}'].zfs_backup_datasets"
#   loop: "{{ zfsbackup_clients }}"
#   register: client_host_datasets

# Result of client_host_datasets
# "client_host_datasets": {
#         "changed": false,
#         "msg": "All items completed",
#         "results": [
#             {
#                 "ansible_loop_var": "item",
#                 "changed": false,
#                 "failed": false,
#                 "hostvars['host-homeautomation'].zfs_backup_datasets": [
#                     "tank/containers"
#                 ],
#                 "item": "host-homeautomation"
#             },
#             {
#                 "ansible_loop_var": "item",
#                 "changed": false,
#                 "failed": false,
#                 "hostvars['host-storage'].zfs_backup_datasets": [
#                     "fastpool/containers",
#                     "slowpool/backups/restic",
#                     "slowpool/pools",
#                     "slowpool/images"
#                 ],
#                 "item": "host-storage"
#             }
#         ],
#         "skipped": false
#     }

#you want:
#client_host_datasets.results[0]."hostvars['host-homeautomation'].zfs_backup_datasets"

# - name: Show value of client_host_datasets
#   ansible.builtin.debug: 
#     var: client_host_datasets.results


- name: "Ensure /backuppool mountpoint is owned by {{ ansible_user }}"
  become: true
  ansible.builtin.file:
    path: /backuppool
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    mode: 0774
    recurse: true

- name: Generate and deploy backup script
  become: true
  ansible.builtin.template:
    src: templates/zfs-backup.sh.j2
    dest: /usr/local/sbin/zfs-backup.sh
    owner: root
    group: root
    mode: 0774

- name: Cron to run zfs-backup.sh
  # Runs at a specified time to catch reboots and previous backup failures
  become: true
  ansible.builtin.cron:
    name: "backup.sh"
    job: /usr/local/sbin/zfs-backup.sh
    state: present
    minute: "{{ zfsbackup_cron_minute }}"
    hour: "{{ zfsbackup_cron_hour }}"

# SET PRIVATE BACKUP KEY FROM VAULT
- name: Ensure .ssh directory exists.
  ansible.builtin.file: 
    dest: "/home/{{ ansible_user}}/.ssh"
    mode: 0700 
    owner: "{{ ansible_user}}"
    group: "{{ ansible_user}}"
    state: directory

- name: debug
  debug: 
    var: vault_zfsbackups_privatekey_b64

- name: Install ssh key
  ansible.builtin.copy: 
    content: "{{ vault_zfsbackups_privatekey_b64 | b64decode }}" 
    dest: "/home/{{ ansible_user}}/.ssh/id_rsa"
    mode: 0600
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user}}"

- name: Allow non-sudo account to do ZFS things
  become: true
  community.general.zfs_delegate_admin:
    name: backuppool
    users: "{{ ansible_user }}"
    permissions: mount,compression,mountpoint,create,mount,receive
    descendents: true