#!/usr/bin/env bash


#################################
# Constants / global variables
#################################
LOGFILE='example.log'
LOGLEVEL='INFO'
QUIET=0 # verbose by default
SKIP_ANSIBLE_PULL=0

LOGDIR={{zfsbackup_logging_dir}}
LOGFILE={{zfsbackup_logging_successfile}}
FAILURE=0 # default is success
SEARCHDOMAIN=.i.affordablepotatoes.com
#################################
# Functions
#################################

# Logging functions
function log_output {
  if [ $QUIET -eq 0 ]; then
    echo `date "+%Y/%m/%d %H:%M:%S"`" $1"
  fi
  echo `date "+%Y/%m/%d %H:%M:%S"`" $1" >> $LOGDIR/$LOGFILE
}

function log_debug {
  if [[ "$LOGLEVEL" =~ ^(DEBUG)$ ]]; then
    log_output "DEBUG $1"
  fi
}

function log_info {
  if [[ "$LOGLEVEL" =~ ^(DEBUG|INFO)$ ]]; then
    log_output "INFO $1"
  fi
}

function log_warn {
  if [[ "$LOGLEVEL" =~ ^(DEBUG|INFO|WARN)$ ]]; then
    log_output "WARN $1"
  fi
}

function log_error {
  if [[ "$LOGLEVEL" =~ ^(DEBUG|INFO|WARN|ERROR)$ ]]; then
    log_output "ERROR $1"
  fi
}

# Some other helper functions
# ...

# Help output
function usage {
  echo
  echo "This is a Bash script template"
  echo "Usage: ./zfs-backup -l <logfile> -L <loglevel> --quiet"
  echo "Example: ./zfs-backup -l example.log -L INFO --quiet"
  echo
}

#################################
# Main
#################################

# Get input parameters
while [[ "$1" != "" ]]; do
  case $1 in
      -l | --logfile )        shift
                              LOGFILE=$1
                              ;;
      -L | --loglevel )       shift
                              LOGLEVEL=$1
                              ;;
      -S | --skip-ansible-pull )       shift
                              SKIP_ANSIBLE_PULL=1
                              ;;
      -Q | --quiet )          shift
                              QUIET=1
                              ;;
      -h | --help )           usage
                              exit
                              ;;
      * )                     usage
                              exit 1
  esac
  shift
done


echo "ZFS Backups"
echo "***********"
echo " "

echo "💭 [$(date --iso-8601=seconds)] Pausing for 60 seconds."
echo " "
pausesecs=$((1 * 60))
while [ $pausesecs -gt 0 ]; do
    echo -ne "🕗 $pausesecs\033[0K\r"
    sleep 1
    : $((pausesecs--))
done
echo " "


echo "DEBUG INFO"
echo "***********"
echo "Logging to: $LOGDIR/$LOGFILE"
echo "Search domain: $SEARCHDOMAIN"
echo " "

sleepnow() {
    # Sleep if script is present
    command -v sleepuntil.sh
    if [ $? -eq 0 ]; 
    then 
        echo "💭 [$(date --iso-8601=seconds)] Going to sleep in 5 mins. {{ ansible_hostname }} will wake up at {{ sleepuntil_sleep_time }}."
        secs=$((5 * 60))
        while [ $secs -gt 0 ]; do
            echo -ne "🕗 $secs\033[0K\r"
            sleep 1
            : $((secs--))
        done
        echo "💭 [$(date --iso-8601=seconds)] Sleeping..."
        sleepuntil.sh "{{ sleepuntil_sleep_time }}"
    fi 
}

success () {
    log_info "✅ Backup success!"
    {% if zfsbackup_healthcheck_send %}
    curl -fsSL https://hc-ping.com/{{ vault_autorestic_ping_key }}/host-backups-daily-zfs-backup-pull
    {% endif %}
    sleepnow
}

failure () {
    log_error "❌ Backup failure."
    {% if zfsbackup_pushover %}
    /usr/bin/curl -s --form-string token="{{vault_pushover_home_automation_key}}" --form-string user="{{vault_pushover_user_key}}" --form-string message="Backup failed - $(date --iso-8601=seconds)" https://api.pushover.net/1/messages.json
    {% endif %}
    sleepnow
}


mkdir -p $LOGDIR
touch $LOGDIR/$LOGFILE

# Perform Ansible pull while the machine is awake
{% if (zfsbackup_ansiblepull_workdir) and (zfsbackup_ansiblepull_script_name) %}
if [ $SKIP_ANSIBLE_PULL -eq 0 ]; then
{{ zfsbackup_ansiblepull_workdir }}/{{ zfsbackup_ansiblepull_script_name }}
fi
{% endif %}



# Loop over clients
{% for zfsbackup_client in zfsbackup_clients %}

echo "Backing up {{ zfsbackup_client }}."
echo "**********************************"

## Is the backup host up?
log_info "Pinging {{ zfsbackup_client }}$SEARCHDOMAIN..."
ping "{{ zfsbackup_client }}$SEARCHDOMAIN" -c2 > /dev/null 2>&1

if [ $? -eq 0 ]; 
then 
  log_info "{{ zfsbackup_client }} is online. Proceeding."

  {% for zfs_backup_dataset in hostvars[zfsbackup_client]['zfs_backup_datasets'] %}
  SYNCOID_COMMAND="/usr/sbin/syncoid --sendoptions=Rw --no-privilege-elevation --no-sync-snap --quiet {{ vault_zfsbackups_user }}@{{ zfsbackup_client }}$SEARCHDOMAIN:{{zfs_backup_dataset}} backuppool/{{ zfsbackup_client }}/{{zfs_backup_dataset}}"
  SYNCOID_OUTPUT=$( $SYNCOID_COMMAND 2>&1 )

  if [ $? -eq 0 ]
  then
      log_info "Finished backup of {{zfs_backup_dataset}}"
  else
      FAILURE=1
      log_error "Could not backup {{zfs_backup_dataset}}" 
      log_error $SYNCOID_OUTPUT
  fi
  {% endfor %}

  log_info "Finished backup of {{ zfsbackup_client }}."
else 
  log_warn "{{ zfsbackup_client }} was not online."
  failure
fi # End online check
echo " "
# ------------------------------------------------
{% endfor %}

# Notify of outcome
if [ $FAILURE -eq 1 ]
then
    failure
else
    success
fi

