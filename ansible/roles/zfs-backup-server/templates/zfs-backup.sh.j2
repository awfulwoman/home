#!/usr/bin/env bash

sleep 60

LOGGING_DIR={{zfsbackup_logging_dir}}
LOGGING_FILE={{zfsbackup_logging_successfile}}
ERROR_FILE=zfsbackup_logging_errorfile
BACKUP_ADDRESS={{zfsbackup_target_server}}
FAILURE=0
SEARCHDOMAIN=.i.affordablepotatoes.com

sleepnow() {
	# Sleep if script is present
	command -v sleepuntil.sh
	if [ $? -eq 0 ]; 
	then 
		echo "Going to sleep in 5 mins. {{ ansible_hostname }} will wake up at {{ sleepuntil_sleep_time }}."
		secs=$((5 * 60))
		while [ $secs -gt 0 ]; do
			echo -ne "$secs\033[0K\r"
			sleep 1
			: $((secs--))
		done
		echo "Sleeping..."
		sleepuntil.sh "{{ sleepuntil_sleep_time }}"
	fi 
}

success () {
	echo "Backup success"
	{% if zfsbackup_healthcheck_send %}
	curl -fsSL https://hc-ping.com/{{ vault_autorestic_ping_key }}/host-backups-daily-zfs-backup-pull
	{% endif %}
	{% if zfsbackup_beep %}
	env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 130 -l 100 -n -f 262 -l 100 -n -f 330 -l 100 -n -f 392 -l 100 -n -f 523 -l 100 -n -f 660 -l 100 -n -f 784 -l 300 -n -f 660 -l 300 -n -f 146 -l 100 -n -f 262 -l 100 -n -f 311 -l 100 -n -f 415 -l 100 -n -f 523 -l 100 -n -f 622 -l 100 -n -f 831 -l 300 -n -f 622 -l 300 -n -f 155 -l 100 -n -f 294 -l 100 -n -f 349 -l 100 -n -f 466 -l 100 -n -f 588 -l 100 -n -f 699 -l 100 -n -f 933 -l 300 -n -f 933 -l 100 -n -f 933 -l 100 -n -f 933 -l 100 -n -f 1047 -l 400
	{% endif %}
	echo ""

	sleepnow
}

failure () {
    echo "Backup failure - logged to $LOGGING_DIR/$ERROR_FILE"
	{% if zfsbackup_beep %}
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 5000 -l 50 -r 6
	{% endif %}
	{% if zfsbackup_pushover %}
    /usr/bin/curl -s --form-string token="{{vault_pushover_home_automation_key}}" --form-string user="{{vault_pushover_user_key}}" --form-string message="Backup failed - $(date --iso-8601=seconds)" https://api.pushover.net/1/messages.json
	{% endif %}
	echo ""

	sleepnow
}


mkdir -p $LOGGING_DIR
touch $LOGGING_DIR/$LOGGING_FILE

# Perform Ansible pull while the machine is awake
{% if (zfsbackup_ansiblepull_workdir) and (zfsbackup_ansiblepull_script_name) %}
su -c '{{ zfsbackup_ansiblepull_workdir }}/{{ zfsbackup_ansiblepull_script_name }}' ubuntu
{% endif %}



# Loop over clients
{% for zfsbackup_client in zfsbackup_clients %}

# ------------------------------------------------

# Is the backup host up?
ping "{{ zfsbackup_client }}.$SEARCHDOMAIN" -c2 > /dev/null 2>&1
if [ $? -eq 0 ]; 
then 
  echo "{{ zfsbackup_client }} online. Proceeding.""
else 
  echo "{{ zfsbackup_client }}" offline. Failure."
  failure
  exit 1 
fi 

echo "[$(date --iso-8601=seconds)] Started {{ zfsbackup_client }} backup run" >> $LOGGING_DIR/$LOGGING_FILE

# GET BACKUP DATASETS FROM THAT CLIENT
# Backup these datasets: {{hostvars[zfsbackup_client]['zfs_backup_datasets']}}

{% for zfs_backup_dataset in hostvars[zfsbackup_client]['zfs_backup_datasets'] %}
echo "[$(date --iso-8601=seconds)] START {{zfs_backup_dataset}} " >> $LOGGING_DIR/$LOGGING_FILE
SYNCOID_OUTPUT=$( /usr/sbin/syncoid --sendoptions=Rw --no-privilege-elevation --no-sync-snap --quiet {{zfs_backup_user}}@{{ zfsbackup_client }}.$SEARCHDOMAIN:{{zfs_backup_dataset}} backuppool/{{ zfsbackup_client }}/{{zfs_backup_dataset}} 2>&1 )

if [ $? -eq 0 ]
then
    echo "[$(date --iso-8601=seconds)] SUCCESS {{zfs_backup_dataset}}" >> $LOGGING_DIR/$LOGGING_FILE
		echo "Successfully backed up {{zfs_backup_dataset}}"
else
    FAILURE=1
    echo "[$(date --iso-8601=seconds)] FAILURE {{zfs_backup_dataset}} " >> $LOGGING_DIR/$LOGGING_FILE
    echo "[$(date --iso-8601=seconds)] FAILURE {{zfs_backup_dataset}} " >> $LOGGING_DIR/$ERROR_FILE
    echo "[$(date --iso-8601=seconds)] FAILURE OUTPUT: " >> $LOGGING_DIR/$ERROR_FILE
    echo $SYNCOID_OUTPUT >> $LOGGING_DIR/$ERROR_FILE
		echo $SYNCOID_OUTPUT
fi
echo "[$(date --iso-8601=seconds)] END {{zfs_backup_dataset}} " >> $LOGGING_DIR/$LOGGING_FILE
{% endfor %}

echo "[$(date --iso-8601=seconds)] Finished backup run" >> $LOGGING_DIR/$LOGGING_FILE
echo " " >> $LOGGING_DIR/$LOGGING_FILE
echo "---------------------" >> $LOGGING_DIR/$LOGGING_FILE
echo " " >> $LOGGING_DIR/$LOGGING_FILE

# ------------------------------------------------
{% endfor %}


# Notify of outcome
if [ $FAILURE -eq 1 ]
then
	failure
else
	success
fi

