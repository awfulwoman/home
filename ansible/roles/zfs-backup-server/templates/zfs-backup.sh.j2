#!/usr/bin/env bash

echo "ZFS Backups"
echo "***********"
echo " "

echo "ðŸ’­ [$(date --iso-8601=seconds)] Pausing for 60 seconds."
echo " "
pausesecs=$((1 * 60))
while [ $pausesecs -gt 0 ]; do
    echo -ne "ðŸ•— $pausesecs\033[0K\r"
    sleep 1
    : $((pausesecs--))
done
echo " "

LOGGING_DIR={{zfsbackup_logging_dir}}
LOGGING_FILE={{zfsbackup_logging_successfile}}
ERROR_FILE={{zfsbackup_logging_errorfile}}
FAILURE=0
SEARCHDOMAIN=.i.affordablepotatoes.com

echo "DEBUG INFO"
echo "***********"
echo "Logging to: $LOGGING_DIR/$LOGGING_FILE"
echo "Logging errors to: $LOGGING_DIR/$ERROR_FILE"
echo "Search domain: $SEARCHDOMAIN"
echo " "

sleepnow() {
    # Sleep if script is present
    command -v sleepuntil.sh
    if [ $? -eq 0 ]; 
    then 
        echo "ðŸ’­ [$(date --iso-8601=seconds)] Going to sleep in 5 mins. {{ ansible_hostname }} will wake up at {{ sleepuntil_sleep_time }}."
        secs=$((5 * 60))
        while [ $secs -gt 0 ]; do
            echo -ne "ðŸ•— $secs\033[0K\r"
            sleep 1
            : $((secs--))
        done
        echo "ðŸ’­ [$(date --iso-8601=seconds)] Sleeping..."
        sleepuntil.sh "{{ sleepuntil_sleep_time }}"
    fi 
}

success () {
    echo "âœ… [$(date --iso-8601=seconds)] Backup success"
    {% if zfsbackup_healthcheck_send %}
    curl -fsSL https://hc-ping.com/{{ vault_autorestic_ping_key }}/host-backups-daily-zfs-backup-pull
    {% endif %}
    echo ""

    sleepnow
}

failure () {
    echo "ðŸ›‘ [$(date --iso-8601=seconds)] Backup failure - logged to $LOGGING_DIR/$ERROR_FILE"
    {% if zfsbackup_pushover %}
    /usr/bin/curl -s --form-string token="{{vault_pushover_home_automation_key}}" --form-string user="{{vault_pushover_user_key}}" --form-string message="Backup failed - $(date --iso-8601=seconds)" https://api.pushover.net/1/messages.json
    {% endif %}
    echo ""

    sleepnow
}


mkdir -p $LOGGING_DIR
touch $LOGGING_DIR/$LOGGING_FILE

# Perform Ansible pull while the machine is awake
{% if (zfsbackup_ansiblepull_workdir) and (zfsbackup_ansiblepull_script_name) %}
{{ zfsbackup_ansiblepull_workdir }}/{{ zfsbackup_ansiblepull_script_name }}
{% endif %}



# Loop over clients
{% for zfsbackup_client in zfsbackup_clients %}

echo "Backing up {{ zfsbackup_client }}."
echo "**********************************"

## Is the backup host up?
echo "ðŸ’­ [$(date --iso-8601=seconds)] Pinging {{ zfsbackup_client }}$SEARCHDOMAIN"
ping "{{ zfsbackup_client }}$SEARCHDOMAIN" -c2 > /dev/null 2>&1

if [ $? -eq 0 ]; 
then 
  echo "âœ… [$(date --iso-8601=seconds)] {{ zfsbackup_client }} online. Proceeding."

  echo "[$(date --iso-8601=seconds)] Started {{ zfsbackup_client }} backup run" >> $LOGGING_DIR/$LOGGING_FILE

  # Backup these datasets: {{hostvars[zfsbackup_client]['zfs_backup_datasets']}}

  {% for zfs_backup_dataset in hostvars[zfsbackup_client]['zfs_backup_datasets'] %}

  echo "ðŸ’­ [$(date --iso-8601=seconds)] Start backup of {{ zfsbackup_client }}:{{ zfs_backup_dataset }}"
  echo "[$(date --iso-8601=seconds)] START {{zfs_backup_dataset}} " >> $LOGGING_DIR/$LOGGING_FILE
  SYNCOID_COMMAND="/usr/sbin/syncoid --sendoptions=Rw --no-privilege-elevation --no-sync-snap --quiet {{ vault_zfsbackups_user }}@{{ zfsbackup_client }}$SEARCHDOMAIN:{{zfs_backup_dataset}} backuppool/{{ zfsbackup_client }}/{{zfs_backup_dataset}}"

  #echo "ðŸ’­ -----------------------"
  #echo "ðŸ’­ $SYNCOID_COMMAND"
  #echo "ðŸ’­ -----------------------"

  SYNCOID_OUTPUT=$( $SYNCOID_COMMAND 2>&1 )

  if [ $? -eq 0 ]
  then
      echo "[$(date --iso-8601=seconds)] SUCCESS {{zfs_backup_dataset}}" >> $LOGGING_DIR/$LOGGING_FILE
      echo "âœ… [$(date --iso-8601=seconds)] Successfully backed up {{zfs_backup_dataset}}"
  else
      FAILURE=1
      echo "[$(date --iso-8601=seconds)] FAILURE {{zfs_backup_dataset}} " >> $LOGGING_DIR/$LOGGING_FILE
      echo "[$(date --iso-8601=seconds)] FAILURE {{zfs_backup_dataset}} " >> $LOGGING_DIR/$ERROR_FILE
      echo "[$(date --iso-8601=seconds)] FAILURE OUTPUT: " >> $LOGGING_DIR/$ERROR_FILE
      echo $SYNCOID_OUTPUT >> $LOGGING_DIR/$ERROR_FILE

      echo "ðŸ›‘ [$(date --iso-8601=seconds)] Syncoid failure backing up {{zfs_backup_dataset}}"
      # echo "ðŸ’­ [$(date --iso-8601=seconds)] MSG: $SYNCOID_OUTPUT"
  fi
  echo "[$(date --iso-8601=seconds)] END {{zfs_backup_dataset}} " >> $LOGGING_DIR/$LOGGING_FILE
  echo "ðŸ’­ [$(date --iso-8601=seconds)] END {{zfs_backup_dataset}}"
  echo " "
  {% endfor %}

  echo "[$(date --iso-8601=seconds)] Finished backup run" >> $LOGGING_DIR/$LOGGING_FILE
  echo " " >> $LOGGING_DIR/$LOGGING_FILE
  echo "---------------------" >> $LOGGING_DIR/$LOGGING_FILE
  echo " " >> $LOGGING_DIR/$LOGGING_FILE
else 
  echo "ðŸ›‘ [$(date --iso-8601=seconds)] {{ zfsbackup_client }} offline. Failure."
  echo " "
  failure
fi # End online check
# ------------------------------------------------
{% endfor %}

# Notify of outcome
if [ $FAILURE -eq 1 ]
then
    failure
else
    success
fi

