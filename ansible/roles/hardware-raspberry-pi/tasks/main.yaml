# Adds additional provisions for a Raspberry Pi

# Determine boot config file location
# Raspbian = /boot/config.txt
# Ubuntu = /boot/firmware/usercfg.txt

# Wifi hardware status
- name: Disable wifi hardware
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-wifi'
    state: present
  when: raspberry_pi_disable_wifi is true

- name: Enable wifi hardware
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-wifi'
    state: absent
  when: raspberry_pi_disable_wifi is false

# Bluetooth hardware status
- name: Disable Bluetooth hardware
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-bt'
    state: present
  when: raspberry_pi_disable_bluetooth is true

- name: Enable Bluetooth hardware
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-bt'
    state: absent
  when: raspberry_pi_disable_bluetooth is false

# Ensure cgroups options for k8s are in place
# ONLY FOR RASPBERRY PI
# - name: Configure cmdline.txt options
#   block:
#     - name: Read cmdline.txt content
#       ansible.builtin.command:
#         cmd: "cat {{ raspberry_pi_cmdline_txt }}"
#       register: _cmdline_file
#       changed_when: false

#     - name: Convert cmdline.txt options to dict object
#       ansible.builtin.set_fact:
#         _cmdline_dict: |
#           {% set d={} -%}
#           {% for item in _cmdline_file.stdout.split(' ') -%}
#           {% set k = item.split('=', 1)[0] -%}
#           {% set v = "".join(item.split('=', 1)[1:]) -%}
#           {% set _ = d.update({k: v}) -%}
#           {% endfor -%}
#           {{ d }}

#     - name: Combine cmdline.txt options with cmdline_options
#       ansible.builtin.set_fact:
#         _cmdline_comb: "{{ _cmdline_dict | combine(raspberry_pi_cmdline_options) }}"

#     - name: Create new cmdline.txt options string
#       ansible.builtin.set_fact:
#         _cmdline: |
#           {% for k, v in _cmdline_comb.items() %}
#           {% if v | string | length > 0 %}
#            {{ k }}={{ v }}
#           {%- else %}
#            {{ k }}
#           {%- endif %}
#           {% endfor %}

#     - name: Ensure cmdline.txt is updated
#       ansible.builtin.copy:
#         content: "{{ _cmdline | trim }}"
#         dest: "{{ raspberry_pi_cmdline_txt }}"
#         owner: root
#         group: root
#         mode: 0755
#       notify: Reboot host
#   when: raspberry_pi_cmdline_txt is defined
