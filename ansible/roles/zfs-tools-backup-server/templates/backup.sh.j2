#!/usr/bin/env bash

# sleep 60

BACKUP_DIR=/var/log/backups/
BACKUP_FILE=backups.log
BACKUP_FILE_FAILURE=error.log
BACKUP_ADDRESS=192.168.1.116
FAILURE=0

mkdir -p $BACKUP_DIR
touch $BACKUP_DIR/$BACKUP_FILE

echo "[$(date --iso-8601=seconds)] Started backup run" >> $BACKUP_DIR/$BACKUP_FILE

# /usr/bin/curl -s --form-string token="{{vault_pushover_home_automation_key}}" --form-string user="{{vault_pushover_user_key}}" --form-string message="{{inventory_hostname}} backup started - $(date --iso-8601=seconds)" https://api.pushover.net/1/messages.json

{% for item in backup_datasets %}
echo "[$(date --iso-8601=seconds)] START {{item}} " >> $BACKUP_DIR/$BACKUP_FILE
SYNCOID_OUTPUT=$( /usr/sbin/syncoid --sendoptions=Rw --no-privilege-elevation --no-sync-snap --quiet zfsbackup@$BACKUP_ADDRESS:{{item}} backups/{{item}} 2>&1 )

if [ $? -eq 0 ]
then
    echo "[$(date --iso-8601=seconds)] SUCCESS {{item}}" >> $BACKUP_DIR/$BACKUP_FILE
else
    FAILURE=1
    echo "[$(date --iso-8601=seconds)] FAILURE {{item}} " >> $BACKUP_DIR/$BACKUP_FILE
    echo "[$(date --iso-8601=seconds)] FAILURE {{item}} " >> $BACKUP_DIR/$BACKUP_FILE_FAILURE
    echo "[$(date --iso-8601=seconds)] FAILURE OUTPUT: " >> $BACKUP_DIR/$BACKUP_FILE_FAILURE
    echo $SYNCOID_OUTPUT >> $BACKUP_DIR/$BACKUP_FILE_FAILURE
fi
echo "[$(date --iso-8601=seconds)] END {{item}} " >> $BACKUP_DIR/$BACKUP_FILE
{% endfor %}

echo "[$(date --iso-8601=seconds)] Finished backup run" >> $BACKUP_DIR/$BACKUP_FILE
echo " " >> $BACKUP_DIR/$BACKUP_FILE
echo "---------------------" >> $BACKUP_DIR/$BACKUP_FILE
echo " " >> $BACKUP_DIR/$BACKUP_FILE

# Notify of failure
if [ $FAILURE -eq 1 ]
then
    /usr/bin/curl -s --form-string token="{{vault_pushover_home_automation_key}}" --form-string user="{{vault_pushover_user_key}}" --form-string message="Backup failed - $(date --iso-8601=seconds)" https://api.pushover.net/1/messages.json
else
    echo "No tears, just dreams"
    rtcwake -m no -l -t $(date +%s -d ‘tomorrow 09:00’)
fi