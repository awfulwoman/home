---
- name: Install ZFS backup tooling
  become: true
  ansible.builtin.apt:
    name:
      - sanoid
      - acl
      - moreutils # for ts (timestamp) util
      - lzop
      - mbuffer
    state: present

- name: Add the user "{{ zfs_backup_user }}"
  become: true
  ansible.builtin.user:
    name: "{{ zfs_backup_user }}"
    comment: ZFS Backup User
    system: true
    create_home: true
    uid: 1099 # just forcing a higher ID in case we need it later
    state: present
  register: created_user

- name: Stat .ssh
  become: true
  ansible.builtin.stat:
    path: "{{ created_user.home }}/.ssh"
  register: ssh_path

- name: Create .ssh dir
  become: true
  ansible.builtin.file:
    path: "{{ created_user.home }}/.ssh"
    state: directory
    owner: "{{ zfs_backup_user }}"
    group: "{{ zfs_backup_user  }}"
    mode: 0664
  when: not ssh_path.stat.exists

- name: Ensure restrict_commands.sh exists
  become: true
  ansible.builtin.copy:
    src: restrict_commands.sh
    dest: /usr/local/bin/restrict_commands.sh
    owner: root
    group: root
    mode: 0777

- name: Create Sanoid config file
  become: true
  ansible.builtin.template:
    src: sanoid.conf.j2
    dest: "/etc/sanoid/sanoid.conf"
    owner: root
    group: root
    mode: 0664

- name: Apply Sanoid cronjob
  become: true
  ansible.builtin.cron:
    name: "Sanoid"
    month: "*"
    day: "*"
    hour: "*"
    minute: "*"
    weekday: "*"
    job: "/usr/sbin/sanoid --cron"
    state: present

- name: List datasets to be given permissions on
  become: true
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ zfs_backup_datasets }}"

- name: Allow "{{ zfs_backup_user }}" user to send backups of listed datasets
  become: true
  community.general.zfs_delegate_admin:
    name: "{{ item }}"
    users: "{{ zfs_backup_user }}"
    permissions: hold,mount,send,snapshot
    # descendents: true
  loop: "{{ zfs_backup_datasets }}"
  when: zfs_backup_datasets is defined

- name: Set authorized key and options
  become: true
  ansible.posix.authorized_key:
    user: "{{ zfs_backup_user }}"
    state: present
    key: "{{ vault_public_key }}"
    key_options: 'restrict,command="restrict_commands.sh"'
  when: vault_public_key is defined
